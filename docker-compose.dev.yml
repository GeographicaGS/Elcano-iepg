pgsql:
  image: geographica/postgis:postgresql-9.1.2-postgis-1.5.8-patched
  volumes_from:
    - elcano_iepg_pgdata
  environment:
    - POSTGRES_PASSWD=${POSTGRES_PASSWORD}

  # DEV config
  ports:
    - "5432:5432"

redis:
  image: redis:2.8
  volumes_from:
    - elcano_iepg_redisdata
  command: redis-server --appendonly yes

  # DEV config
  ports:
    - "6379:6379"

api_backend:
  image: geographica/elcano_iepg_api:latest
  links:
    - pgsql:pgsql
    - redis:redis
  volumes_from:
    - elcano_iepg_mediadata
  environment:
    - POSTGRES_DB=${POSTGRES_DB}
    - POSTGRES_USER=${POSTGRES_USER}
    - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    - API_SECRET_KEY=${API_SECRET_KEY}

  command: python run_backend.py

  # Dev variables
  ports:
    - "5000:5000"

  #DEV
  volumes:
    - ./www-srv/src:/usr/src/app

api_frontend:
  image: geographica/elcano_iepg_api:latest
  links:
    - pgsql:pgsql
    - redis:redis
  environment:
    - POSTGRES_DB=${POSTGRES_DB}
    - POSTGRES_USER=${POSTGRES_USER}
    - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    - TWITTER_API_KEY=${TWITTER_API_KEY}
    - TWITTER_API_SECRET=${TWITTER_API_SECRET}
    - TWITTER_TOKEN=${TWITTER_TOKEN}
    - TWITTER_TOKEN_SECRET=${TWITTER_TOKEN_SECRET}
    - API_SECRET_KEY=${API_SECRET_KEY}

  command: python run_frontend.py

  # Dev variables
  ports:
    - "5001:5000"
  #command: python run_frontend.py

  #DEV
  volumes:
    - ./www-srv/src:/usr/src/app

api_explora:
  image: geographica/elcano_iepg_api:latest
  links:
    - pgsql:pgsql
    - redis:redis

  environment:
    - POSTGRES_DB=${POSTGRES_DB}
    - POSTGRES_USER=${POSTGRES_USER}
    - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    - API_SECRET_KEY=${API_SECRET_KEY}

  # Dev variables
  ports:
    - "5002:5000"
  command: python run_explora.py

  #DEV
  volumes:
    - ./www-srv/src:/usr/src/app

nginx:
  build: .
  dockerfile: nginx/dev/Dockerfile
  ports:
    - "80:80"
  volumes_from:
    - elcano_iepg_mediadata
  links:
    - api_explora:api_explora
    - api_backend:api_backend
    - api_frontend:api_frontend

  #DEV
  volumes:
    - ./www/cdn:/cdn
    - ./www/src:/src

www_builder:
  build: www
  links:
    - pgsql:pgsql

  volumes:
    - ./www/src:/usr/src/app
    - ./www/cdn:/usr/src/cdn

  environment:
    - POSTGRES_HOST=${POSTGRES_HOST}
    - POSTGRES_DB=${POSTGRES_DB}
    - POSTGRES_USER=${POSTGRES_USER}
    - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}

  #command: npm run-script builder-watcher
  command: npm run-script builder-watcher-frontend
  # command: npm run-script builder-watcher-backend
  #command: npm run-script builder-watcher-explora
  #command: npm run-script debug
